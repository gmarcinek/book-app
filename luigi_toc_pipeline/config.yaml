# Configuration for TOC-based document processing

TOCDetector:
  # Heuristic settings
  max_pages_to_scan: 1000
  toc_keywords:
    - "spis treści"
    - "treść" 
    - "table of contents"
    - "contents"
    - "indice"
    - "sommaire"
    - "chapter contents"
  
  min_toc_entries: 3
  
  # LLM verification settings
  verification_llm_model: "claude-3.5-haiku"
  verification_temperature: 0.0
  verification_prompt: |
    Analyze these pages from a PDF document to find Table of Contents.

    PAGES DATA:
    {text}

    TASK: Determine if there's a Table of Contents and extract its structure.

    LOOK FOR:
    - "Spis treści", "Table of Contents", "Contents", "Treść"
    - Lists with page numbers: "Rozdział 1 ......... 15"
    - Hierarchical structure: chapters, sections, subsections
    - Page number references at line ends

    RESPOND WITH JSON ONLY:
    {{"toc_found": true/false, "toc_page": 2, "toc_entries": [{{"title": "Rozdział 1", "page": 15}}, {{"title": "Rozdział 2", "page": 23}}]}}

    JSON FORMATTING RULES:
    - Use standard ASCII double quotes (") only
    - Convert Polish quotes („ ") to ASCII quotes (")  
    - Convert Unicode quotes (" ") to ASCII quotes (")
    - Escape quotes inside strings: \"
    - Escape backslashes: \\
    - Use only ASCII characters in JSON structure
    
    ONLY VALID JSON, no explanation, no markdown blocks.

TOCFallbackLLMStrategy:
  model: "gpt-4.1-nano"
  max_tokens: 8000
  temperature: 0.0
  
  semantic_prompt: |
    Jesteś algorytmem analizy dokumentów który tworzy spis treści.
    
    Przeanalizuj nagłówki dokumentu i znajdź jego naturalną strukturę - rozdziały, sekcje, załączniki.
    
    TEKST DOKUMENTU:
    {text}
    
    Twoim zadaniem jest utworzenie spisu treści w formie mapy:
    - Klucz: tytuł rozdziału/sekcji jak pojawia się w dokumencie
    - Wartość: początkowy tekst tego rozdziału (unikalny fragment początku)
    
    Szukaj wzorców takich jak:
    - Nagłówki rozdziałów
    - Numerowane sekcje  
    - Załączniki
    - Definicje
    - Tabele jako osobne sekcje
    
    JSON format:
    {
      "Introduction": "tekst początku sekcji Introduction dokładnie jak w dokumencie",
      "Chapter 1: Overview": "tekst początku Chapter 1 dokładnie jak w dokumencie", 
      "Definitions": "tekst początku sekcji z definicjami",
      "Appendix A": "tekst początku załącznika A"
    }
    
    Bądź precyzyjny - start_text musi być unikalny w dokumencie żeby można było go znaleźć.

TOCLLMParser:
  model: "gpt-4o-mini"
  # model: "claude-3.5-haiku"
  temperature: 0.0
  target_width_px: 800
  jpg_quality: 65
  vision_prompt: |
    Analyze the extracted Table of Contents (TOC) section using text and images.
    EXTRACTED TEXT:
    {text_content}

    NOTE: This PDF contains only a fragment (middle or continuation) of the full TOC. Page numbers refer to the original document.

    TASK: Parse all visible TOC entries into a JSON object with a key "entries", each entry having:

    - "title": string — entry title
    - "page": integer or null — original page number
    - "level": integer — hierarchy level (1 = chapter, 2 = subsection, etc.)
    - "type": string — one of "chapter", "section", or "article"

    Example:

    {
      "entries": [
        {"title": "Rozdział 1 - Wprowadzenie", "page": 15, "level": 1, "type": "chapter"},
        {"title": "1.1 Podstawowe pojęcia", "page": 17, "level": 2, "type": "section"}
      ]
    }

    RULES:
    - Include all visible entries, even if incomplete.
    - Use images to verify text accuracy.
    - Do not assume missing context; parse only visible data.
    - Respond ONLY with valid JSON, no markdown, no explanations.
    - Use standard ASCII double quotes and ESCAPE THEM PROPERLY (e.g., \" for quotes inside strings).
    - Escape all other special JSON characters as required (e.g., backslash \\).


TOCSplitter:
  overlap_pages: 2
  min_section_pages: 1
  max_sections: 50  # Safety limit

# Global settings
performance:
  processing_timeout: 300
  retry_attempts: 2

logging:
  level: "INFO"
  save_intermediate_files: true